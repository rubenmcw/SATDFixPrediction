Satd_type~v1_comment
SATD_CHANGED~TODO: Load analysis data FIXME results .csv from a constant
SATD_REMOVED~TODO: Load analysis data FIXME results .csv from a constant
SATD_REMOVED~FIXME: use analysis name
SATD_REMOVED~FIXME:
SATD_REMOVED~TODO: sort func must be independent of param index
CLASS_OR_METHOD_CHANGED~FIXME: Review
SATD_REMOVED~TODO order by sum tag
SATD_REMOVED~FIXME: Really needed ?
SATD_REMOVED~FIXME: Really needed ?
SATD_REMOVED~FIXME: ask Christian about it, maybe it should go to the figure. FIXME: a lo mejor con conservar un decorador especifico para la data matrix ya es suficiente, este nos puede proporcionar el tipo de dato.
SATD_REMOVED~This is a workaround for bug in Swing: http://bugs.sun.com/view_bug.do?bug_id=4473075
CLASS_OR_METHOD_CHANGED~This is a workaround for bug in Swing: http://bugs.sun.com/view_bug.do?bug_id=4473075
SATD_REMOVED~FIXME: Improve efficency (dont use maps and sets!!)
SATD_REMOVED~FIXME: de donde puedo sacar el resource para guardar la matriz?
SATD_REMOVED~FIXME: el baseResource no es necesario siempre no hay porque arrastralo
FILE_PATH_CHANGED~FIXME:
FILE_PATH_CHANGED~FIXME:
SATD_REMOVED~FIXME: could it be transient?
FILE_PATH_CHANGED~FIXME: de donde puedo sacar el resource para guardar la matriz?
FILE_PATH_CHANGED~FIXME: el baseResource no es necesario siempre no hay porque arrastralo
SATD_REMOVED~FIXME:
SATD_REMOVED~FIXME:
SATD_REMOVED~FIXME: de donde puedo sacar el resource para guardar la matriz?
SATD_REMOVED~FIXME: el baseResource no es necesario siempre no hay porque arrastralo
CLASS_OR_METHOD_CHANGED~FIXME: it must go on every entityPersistence
SATD_REMOVED~FIXME the monitor should be passed through method parameters
FILE_PATH_CHANGED~FIXME
SATD_REMOVED~TODO remove exception
SATD_REMOVED~TODO This is not the place to create new JAXB instance FIXME remove
SATD_REMOVED~FIXME Esto no va aqui
SATD_REMOVED~FIXME Review: calculon ????
SATD_REMOVED~FIXME Artifact.getResource()
SATD_CHANGED~FIXME
SATD_REMOVED~TODO this info should come from another page
SATD_REMOVED~TODO wsdl url
SATD_REMOVED~FIXME
SATD_REMOVED~FIXME use wsdlUrl
SATD_REMOVED~TODO remove JAXB support
SATD_REMOVED~TODO rename to getCells
SATD_REMOVED~TODO rename to setCells
SATD_REMOVED~FIXME XmlTransient
SATD_REMOVED~TODO Rename to setPathResolver
SATD_REMOVED~TODO It should be configurable
SATD_REMOVED~FIXME XmlTransient
SATD_REMOVED~FIXME XmlTransient @XmlJavaTypeAdapter(MatrixXmlAdapter.class)
SATD_REMOVED~TODO: new modules format
SATD_REMOVED~TODO It should be configurable
CLASS_OR_METHOD_CHANGED~FIXME: heap problems with annotations..
SATD_REMOVED~TODO status icon
CLASS_OR_METHOD_CHANGED~TODO status icon
SATD_REMOVED~TODO
SATD_REMOVED~TODO
SATD_REMOVED~TODO
SATD_REMOVED~TODO
CLASS_OR_METHOD_CHANGED~TODO status icon
SATD_REMOVED~TODO remove JAXB support
SATD_REMOVED~TODO rename to makeCells()
SATD_REMOVED~TODO Allow Welcome to be closed ???
SATD_REMOVED~FIXME use JAXB to save state
SATD_REMOVED~GEN-FIRST:event_leftLogoMouseClicked TODO add your handling code here: GEN-LAST:event_leftLogoMouseClicked
SATD_REMOVED~GEN-FIRST:event_leftLogoMouseClicked TODO add your handling code here: GEN-LAST:event_leftLogoMouseClicked
SATD_REMOVED~GEN-FIRST:event_leftLogoMouseClicked TODO add your handling code here: GEN-LAST:event_leftLogoMouseClicked
SATD_REMOVED~TODO Deberia lanzar una excepciÃ³n?
CLASS_OR_METHOD_CHANGED~TODO Deberia lanzar una excepciÃ³n?
SATD_REMOVED~TODO transposition if correlation for rows selected
SATD_REMOVED~FIXME use double[]
SATD_REMOVED~TODO count how many pairs to compare
SATD_REMOVED~FIXME: this must be common to MatrixView and TableView
SATD_REMOVED~FIXME This code is very inefficient !!! check getNextInstance and getStructure
FILE_PATH_CHANGED~FIXME: external parameter
SATD_REMOVED~FIXME: heap problems with annotations..
FILE_PATH_CHANGED~FIXME by columns
SATD_REMOVED~FIXME the name of the module depends on the name of the matrix view columns, may be the module map should be saved
SATD_REMOVED~FIXME imatrixview only when visibility or lead changed
SATD_REMOVED~TODO: allow to add various ClusterSets and remove the following line
SATD_CHANGED~Get map from the FTP --- TODO Filter out items not in data
SATD_REMOVED~Get map from the FTP --- TODO Filter out items not in data
SATD_REMOVED~TODO getMtc() ...
SATD_REMOVED~TODO This is inefficient, it is being used all the matrix row because of the way the test.processTest() works, but only some columns are being processed. We should take only the values corresponding to the selected columns for this module.
SATD_CHANGED~FIXME: May be its better return null ???
SATD_REMOVED~FIXME: allow multiple HeatmapClusterBands to be stored
SATD_MOVED_FILE~TODO activate in the next version:
CLASS_OR_METHOD_CHANGED~FIXME what if cache is disabled ?
SATD_MOVED_FILE~TODO remove selected text before
SATD_REMOVED~GEN-FIRST:event_selectUrlPatternActionPerformed TODO add your handling code here: GEN-LAST:event_selectUrlPatternActionPerformed
SATD_REMOVED~GEN-FIRST:event_selectUrlPatternActionPerformed TODO add your handling code here: GEN-LAST:event_selectUrlPatternActionPerformed
SATD_REMOVED~GEN-FIRST:event_upClusterActionPerformed TODO add your handling code here: GEN-LAST:event_upClusterActionPerformed
SATD_REMOVED~GEN-FIRST:event_upClusterActionPerformed TODO add your handling code here: GEN-LAST:event_upClusterActionPerformed
SATD_REMOVED~GEN-FIRST:event_downClusterActionPerformed TODO add your handling code here: GEN-LAST:event_downClusterActionPerformed
SATD_REMOVED~GEN-FIRST:event_downClusterActionPerformed TODO add your handling code here: GEN-LAST:event_downClusterActionPerformed
SATD_REMOVED~GEN-FIRST:event_downClusterActionPerformed TODO add your handling code here: GEN-LAST:event_downClusterActionPerformed
SATD_REMOVED~GEN-FIRST:event_downClusterActionPerformed TODO add your handling code here: GEN-LAST:event_downClusterActionPerformed
SATD_REMOVED~GEN-FIRST:event_downClusterActionPerformed TODO add your handling code here: GEN-LAST:event_downClusterActionPerformed
SATD_REMOVED~GEN-FIRST:event_sortByClusterActionPerformed TODO add your handling code here: GEN-LAST:event_sortByClusterActionPerformed
SATD_CHANGED~GEN-FIRST:event_sortByClusterActionPerformed TODO add your handling code here: GEN-LAST:event_sortByClusterActionPerformed
SATD_REMOVED~GEN-FIRST:event_sortByClusterActionPerformed TODO add your handling code here: GEN-LAST:event_sortByClusterActionPerformed
SATD_REMOVED~TODO this option should disappear
SATD_REMOVED~FIXME Esto tiene pinta de que deberÃ­a ir o en pageLeft o en Page:updateModel
SATD_REMOVED~TODO take into account extBorderSize
SATD_REMOVED~FIXME Review
SATD_REMOVED~TODO Rename to IAttributeAdapter ?
SATD_REMOVED~FIXME Review
SATD_REMOVED~it should be mime type then TODO check valid mime
SATD_REMOVED~it should be mime type then TODO check valid mime
SATD_CHANGED~it should be mime type then TODO check valid mime
SATD_REMOVED~FIXME Review
SATD_REMOVED~TODO:
SATD_REMOVED~TODO runtime.log.logsystem.class <-> org.apache.velocity.runtime.log.LogChute
SATD_REMOVED~FIXME: external parameter
SATD_REMOVED~FIXME what if cache is disabled ?
SATD_REMOVED~TODO Enable save feature
SATD_REMOVED~FIXME
SATD_REMOVED~FIXME
SATD_REMOVED~FIXME
SATD_REMOVED~FIXME
SATD_REMOVED~FIXME
SATD_REMOVED~FIXME
SATD_REMOVED~FIXME
SATD_REMOVED~FIXME Esta clase tiene muy mala pinta !!!!!!!!!!!
SATD_REMOVED~it should be mime type then TODO check valid mime
SATD_REMOVED~it should be mime type then TODO check valid mime
SATD_CHANGED~it should be mime type then TODO check valid mime
SATD_REMOVED~TODO: how to remove decorationCache for heatmaps being closed?
SATD_CHANGED~FIXME Put this in other place !!!
SATD_CHANGED~FIXME Put this in other place !!!
SATD_REMOVED~TODO check valid mime
SATD_REMOVED~TODO check valid mime
SATD_REMOVED~FIXME This shouldnt be here
SATD_REMOVED~TODO enablse save feature
SATD_REMOVED~TODO: Heatmap should implement IMatrixView and handle movement and visibility synchronized between annotations, clusters and so on.
SATD_REMOVED~FIXME will cause null pointer exception but is unused ?
SATD_REMOVED~FIXME No funciona
SATD_REMOVED~FIXME
SATD_REMOVED~FIXME
SATD_REMOVED~FIXME
SATD_REMOVED~FIXME
SATD_REMOVED~TODO remove JAXB support
SATD_REMOVED~TODO remove JAXB support
CLASS_OR_METHOD_CHANGED~TODO: sort by label with all selected properties!
SATD_REMOVED~TODO: needs fireproperty change? - one time action
SATD_REMOVED~TODO take into account extBorderSize
SATD_REMOVED~TODO shift selection
SATD_CHANGED~FIXME should depend on screen size FIXME should depend on screen size
SATD_REMOVED~TODO Parallelize
SATD_REMOVED~TODO: place the cast in a different place: inside Group??
SATD_REMOVED~TODO This is temporal while we only manage Double matrix.
SATD_REMOVED~GEN-FIRST:event_testCboxActionPerformed TODO add your handling code here: GEN-LAST:event_testCboxActionPerformed
SATD_REMOVED~TODO Parallelize
SATD_REMOVED~TODO: place the cast in a different place: inside Group??
SATD_REMOVED~TODO This is temporal while we only manage Double matrix.
SATD_REMOVED~GEN-FIRST:event_testCboxActionPerformed TODO add your handling code here: GEN-LAST:event_testCboxActionPerformed
FILE_PATH_CHANGED~sort group item indices FIXME this is redundant for diferent conditions
FILE_PATH_CHANGED~We do reflection from here on. Failure is silently ignored. The workaround is simply not installed when something goes wrong here
FILE_PATH_CHANGED~Fix the horizontal and vertical thickness of popup menu style
FILE_PATH_CHANGED~Fix the vertical thickness of the popup menu separator style
FILE_PATH_CHANGED~Silently ignored. Workaround cant be applied.
FILE_PATH_CHANGED~GTK+ L&F keeps icons hidden in style
FILE_PATH_CHANGED~FIXME Use a default url
FILE_PATH_CHANGED~TODO streamStack
FILE_PATH_CHANGED~TODO parse contents and generate events
FILE_PATH_CHANGED~TODO
FILE_PATH_CHANGED~TODO status icon
FILE_PATH_CHANGED~Somewhat silly class, needed to pass values between threads
FILE_PATH_CHANGED~Instance is created once data in array values. This improves time performance
FILE_PATH_CHANGED~FIXME: May be its better to return null ???
FILE_PATH_CHANGED~FIXME: Review
FILE_PATH_CHANGED~Workaround for FTP problem connecting ftp.geneontology.org with URL.openStream()
SATD_REMOVED~TODO: none conversion from where?
SATD_REMOVED~TODO allow the default editor tab length to be configurable
SATD_REMOVED~TODO: ADD ICON heatmap or analysis
SATD_REMOVED~TODO Deberia lanzar una excepciÃ³n?
SATD_REMOVED~todo add via editor manager (Weld not working welll
SATD_REMOVED~GEN-FIRST:event_useAllRbActionPerformed TODO add your handling code here: GEN-LAST:event_useAllRbActionPerformed
SATD_REMOVED~GEN-FIRST:event_useSelectedRbActionPerformed TODO add your handling code here: GEN-LAST:event_useSelectedRbActionPerformed
SATD_REMOVED~when translating lead/lag Functions. - Hold on to them in QueryTranslationInfo. - On the GenericUDFLeadLag object set a ExprNodeEvaluator - for this is a new ExprNodeEvaluator based on the 1st argument ExprNodeDesc - this means that the Lead/Lag expression is evaluated both for the current row and again for the correct row. - this is because no easy way to get to the children/defferedChildren instance variables on ExprNodeGenericFuncEvaluator - fixing this behavior requires extending ExprNodeGenericFuncEvaluator and reimplementing all methods - dont want to do this. - Todo(if possible): ask Hive guys to allow get/set on instance vars.
SATD_REMOVED~TODO: Round-robin ?
SATD_REMOVED~TODO: Patch apacheds to support AAAA records
SATD_REMOVED~TODO not one verticle factory per module ref, but one per language per module ref
SATD_REMOVED~Theres now a workaround due to dodgy classloading in Jython https://github.com/vert-x/mod-lang-jython/issues/7 It seems that Jython doesnt always ask the correct classloader to load resources from modules to workaround this we can, if the resource is not found, and the TCCL is different from this classloader to ask the TCCL to load the class - the TCCL should always be set to the moduleclassloader of the actual module doing the import
SATD_REMOVED~TODO I think this can be simplified / optimised
SATD_REMOVED~this is the most expensive way so do it as last resort
SATD_REMOVED~TODO - do we really need this?
SATD_REMOVED~FIXME - is this really pipeliing?
CLASS_OR_METHOD_CHANGED~We write the response back after a random time to increase the chances of responses written in the wrong order if we didn't implement pipelining correctly
SATD_REMOVED~FIXME - make sure this is right and get rid of worker param
SATD_REMOVED~TODO: maybe use a special exception ?
SATD_REMOVED~FIXME - seems a bit clunky. Is there a better way?
SATD_REMOVED~TODO - shouldnt this be -1 ??
SATD_REMOVED~TODO shouldnt this be run async?
SATD_REMOVED~FIXME - workaround for https://github.com/netty/netty/issues/2586 If listen already succeeded on a different event loop, and then addListener is called again on the completed future from a different event loop then the handler will be called on the original event loop not on the when that called addListener. To reproduce set the boolean parameter on execute (below) to true. Then run Httptest.testTwoServersSameAddressDifferentContext()
FILE_PATH_CHANGED~TODO make this configurable
SATD_REMOVED~Moved in 1xPool
SATD_REMOVED~Todo in the other pool ???
CLASS_OR_METHOD_CHANGED~Handle this case better
CLASS_OR_METHOD_CHANGED~Maybe the connection can be reused
CLASS_OR_METHOD_CHANGED~Todo :  limit according to the max concurrency of the stream
CLASS_OR_METHOD_CHANGED~TODO
SATD_REMOVED~Perhaps its possible to remove this with writeBuffer(buf, true) instead
SATD_REMOVED~Todo :  limit according to the max concurrency of the stream
SATD_REMOVED~Handle this case better
SATD_REMOVED~TODO some way of getting this from the version in pom.xml
SATD_REMOVED~todo: later switch to PoolMetrics
SATD_REMOVED~todo: fix when reworking pool metrics
SATD_REMOVED~queuing == true <=> (paused || (pendingResponse != null && msg instanceof HttpRequest) || !pending.isEmpty())
CLASS_OR_METHOD_CHANGED~TODO chunk trailers
SATD_REMOVED~We do the initial check outside the synchronized block to prevent the hit of synchronized once the conn has been set
SATD_REMOVED~TODO Can we get rid of this?
SATD_REMOVED~Should take care of pending list ????
SATD_REMOVED~TODO check if .replace(wsFrame.getBinaryData()) is really needed
SATD_REMOVED~TODO:  Check if the given address is a valid ip address before pass it to InetAddres.getByName(..) This is need as otherwise it may try to perform a DNS lookup. An other option would be to change address to be of type InetAddress.
SATD_REMOVED~todo: should be renamed equest after
SATD_REMOVED~FIX THIS WORKAROUND
CLASS_OR_METHOD_CHANGED~FIXME make sure a optimized mock is provided when no constraints are present.
SATD_REMOVED~TODO remove
SATD_REMOVED~TODO caching the object class is useful?
SATD_REMOVED~TODO move to Factory at least
SATD_REMOVED~todo - implement
SATD_REMOVED~TODO should not be Hibernate specific in most case
SATD_REMOVED~TODO should not be Hibernate specific in most case
SATD_REMOVED~FIXME change accessibility only once, that's somewhat costly. do it when Member is created
SATD_MOVED_FILE~FIXME use error.getProperty()
SATD_REMOVED~FIXME why is this a null group!! Used to be \ string should it be Default. Looks weird
CLASS_OR_METHOD_CHANGED~FIXME do choose the right validator depending on the object validated
FILE_PATH_CHANGED~FIXME not sure why it is like that. We should cache these instances somehow. Static?
SATD_REMOVED~TODO is there a way to replace ? by so kind of <T> to express the correlation?
SATD_REMOVED~FIXME make sure a optimized mock is provided when no constraints are present.
FILE_PATH_CHANGED~FIXME I implement both interfaces on the same object as a quick hack, we need to fix that.
FILE_PATH_CHANGED~TODObe more contextually specific
FILE_PATH_CHANGED~FIXME throw assertion exception if constraintValidatorType == null
FILE_PATH_CHANGED~FIXME raise an exception if validatorType is not a class
FILE_PATH_CHANGED~FIXME throw assertion exception if constraintValidatorType == null
FILE_PATH_CHANGED~FIXME raise an exception if validatorType is not a class
FILE_PATH_CHANGED~else we dont care I think
SATD_REMOVED~TODO make it a list
SATD_REMOVED~FIXME do make it truely multivalidators FIXME dont rely on properties files, what's the point
SATD_REMOVED~FIXME do choose the right validator depending on the object validated
SATD_REMOVED~TODObe more contextually specific
SATD_REMOVED~FIXME use error.getProperty()
SATD_REMOVED~FIXME I implement both interfaces on the same object as a quick hack, we need to fix that.
SATD_REMOVED~TODO are we sure a @Constraint is there?
SATD_REMOVED~FIXME This sounds really bad, why value can be null. Why are we deciding of the validator based on the value?
SATD_REMOVED~TODO Is this corect or should we get a IllegalArgumentException
SATD_REMOVED~FIXME isValidationRequired for all constraints in a given context May need to divide by elementType
SATD_REMOVED~FIXME isValidationRequired for all constraints in a given context May need to divide by elementType
SATD_REMOVED~TODO add test with correct paths and types to make sure the impl does not mess it up
SATD_REMOVED~use metadata first as ReflectionHelper#containsMember is slow TODO store some metadata here?
SATD_REMOVED~TODO better error report
SATD_REMOVED~FIXME its probably better to use String as a key rather than Method to speed up and avoid any fancy permsize/GC issue I'd better check the litterature on the subject
SATD_REMOVED~TODO round 34ms to generate the proxy, hug! is Javassist Faster?
SATD_REMOVED~TODO dont quite understand this warning TODO assuming U.getClass() returns Class<U>
CLASS_OR_METHOD_CHANGED~TODO GM: is it possible to use the existing context here?
CLASS_OR_METHOD_CHANGED~TODO GM: evaluate group sequences
SATD_REMOVED~TODO GM: is it possible to use the existing context here?
CLASS_OR_METHOD_CHANGED~TODO GM: evaluate group sequences
CLASS_OR_METHOD_CHANGED~TODO GM: is that right?
CLASS_OR_METHOD_CHANGED~TODO GM: is that right?
SATD_REMOVED~TODO GM: parametrize with type of constraint site
SATD_REMOVED~TODO GM: this should be pulled out so that a group is processed over all evaluated parameters before going to the next group. In the current form the group order seems pretty counter-intuitive
SATD_REMOVED~TODO GM: This does not work. The parameter index is lost that way.
SATD_REMOVED~TODO GM: is that right?
SATD_REMOVED~TODO GM: is that right?
SATD_REMOVED~maybe the given method is one not defined on the type represented by this bean meta data object but up in the hierarchy, so search using the method signature
SATD_REMOVED~TODO GM: avoid this cast
SATD_REMOVED~Note on visibility of members: These members are intentionally made package-private instead of private. They are only referenced in this package and there shouldnt be public getters as they would pollute the fluent definition API
SATD_MOVED_FILE~TODO GM: Determine which default sequence should be taken
SATD_MOVED_FILE~TODO GM: Determine which default sequence provider should be taken
SATD_REMOVED~TODO GM: can this be merged with cache?
SATD_REMOVED~TODO GM: merge, if also programmatic provider has this option
CLASS_OR_METHOD_CHANGED~TODO GM: merge, if also programmatic provider has this option
SATD_REMOVED~TODO GM: dont retrieve annotation meta data several times per type
SATD_REMOVED~TODO GM: it would be nicer if PropertyMetaData itself could create an equivalent PropertyDescriptor. Currently this doesnt work as the descriptor needs a reference to the BeanMetaData object.
SATD_REMOVED~TODO HV-571
SATD_REMOVED~TODO GM: to be compatible with getConstraintsForProperty() this method should only return a descriptor if the given method is constrained.
SATD_REMOVED~TODO HV-571
SATD_REMOVED~todo check the use of generics in this method. it really does not make sense - HF
SATD_REMOVED~TODO - why can this be null (HF)
SATD_REMOVED~TODO -  propertyDescriptor.getElementClass() returns eg just Collection instead of the element type (HF)
CLASS_OR_METHOD_CHANGED~TODO -  propertyDescriptor.getElementClass() returns eg just Collection instead of the element type (HF)
SATD_REMOVED~TODO -  propertyDescriptor.getElementClass() returns eg just Collection instead of the element type (HF)
SATD_REMOVED~TODO - autsch (HF)
SATD_REMOVED~TODO - for now just a setter. maybe add a copy constructor later (HF)
SATD_REMOVED~TODO: create internal implementation and return this
CLASS_OR_METHOD_CHANGED~TODO - iterating over the members seems to be expensive. Need to check whether we can have a better data structure in BeanMetaData (HF)
SATD_REMOVED~TODO - HV-571
SATD_REMOVED~TODO - HV-571
SATD_REMOVED~TODO - HV-571
SATD_REMOVED~TODO - HV-571
SATD_REMOVED~TODO - iterating over the members seems to be expensive. Need to check whether we can have a better data structure in BeanMetaData (HF)
SATD_REMOVED~TODO - add @MethodValidated programmatically where needed
SATD_REMOVED~TODO - iterating over the members seems to be expensive. Need to check whether we can have a better data structure in BeanMetaData (HF)
SATD_REMOVED~TODO - iterating over the members seems to be expensive. Need to check whether we can have a better data structure in BeanMetaData (HF)
SATD_REMOVED~TODO HV-571: Avoid these casts
SATD_REMOVED~TODO HV-632: Use JBoss Logging
SATD_REMOVED~TODO HV-571: Discuss whether ConstructorDescriptor and MethodDescriptor should really extend ElementDescriptor. Methods as getConstraintDescriptors() or findConstraints() seem really useful only on ReturnValueDescriptor and ParameterDescriptor.
SATD_REMOVED~TODO HV-632: What path to take here?
SATD_REMOVED~TODO GM: consider violations from cascaded validation
SATD_REMOVED~TODO HV-638: Use JBoss logging
SATD_REMOVED~TODO HV-638: Fails when using j.u.Set as parameter type
SATD_REMOVED~TODO GM: I think the wrong element type is used for constructor constraints
FILE_PATH_CHANGED~TODO HV-571: Add tests where runtime type differs between elements in cascaded list
SATD_REMOVED~TODO assert parameter types?
SATD_REMOVED~TODO Can be made transient since it is only used during object construction. It would be better if we would not have to pass it at all
SATD_REMOVED~TODO be extra safe and make sure this is an array of Payload
SATD_REMOVED~TODO - implement https://hibernate.onjira.com/browse/HV-720 Class<? extends ConstraintValidator<?, ?>> validatedBy = annotationType .getAnnotation( CrossParameterConstraint.class )
SATD_REMOVED~TODO - implement https://hibernate.onjira.com/browse/HV-720
SATD_REMOVED~TODO - https://hibernate.onjira.com/browse/HV-720 verify test
SATD_REMOVED~TODO - https://hibernate.onjira.com/browse/HV-720 verify test
SATD_REMOVED~TODO HV-571
SATD_REMOVED~TODO HV-571
SATD_REMOVED~TODO - https://hibernate.onjira.com/browse/HV-720 verify test
SATD_REMOVED~TODO we need to take @ValidateExecutable into account as well
SATD_REMOVED~TODO re-use shared instance
SATD_REMOVED~explicitly set the value handler to null. Is there a better place to do this? (HF)
SATD_REMOVED~for the sake of better reporting we unwrap if there is a unwrapper in the context
SATD_REMOVED~if we have a trailing dot in local or domain part we have an invalid email address. the regular expression match would take care of this, but IDN.toASCII drops the trailing (imo a bug in the implementation)
SATD_REMOVED~TODO Remove once the original one supports TYPE_USE
SATD_REMOVED~TODO graphs needs to be generated and deeper
CLASS_OR_METHOD_CHANGED~TODO switch to proper multi key map (HF)
SATD_REMOVED~TODO remove legacy unwrap implementation
SATD_REMOVED~TODO - Is this the right way of handling the merge of unwrapMode? (HF)
SATD_REMOVED~TODO implicit unwrapping not supported
FILE_PATH_CHANGED~TODO implicit unwrapping not supported for now
SATD_REMOVED~TODO - Is this the right way of handling the merge of unwrapMode? (HF)
SATD_REMOVED~TODO: applying to the wrapper by default seems legit
SATD_REMOVED~TODO prevent duplicates
SATD_CHANGED~TODO keep most specific one if several extractors are found for the most specific type, e.g. key and value extractors for Map, raise an exception
SATD_CHANGED~TODO implement selection of most specific extractor per requested type parameter
SATD_REMOVED~TODO should only happen during transition off value unwrappers
SATD_REMOVED~TODO HV-1245 this should be TYPE_USE once its included in BV
SATD_REMOVED~TODO HV-1245 this should be TYPE_USE once its included in BV
SATD_REMOVED~TODO HV-919 Support specification of type parameter constraints via XML and API
SATD_REMOVED~TODO HV-919 Support specification of type parameter constraints via XML and API
SATD_REMOVED~TODO HV-919 Support specification of type parameter constraints via XML and API
SATD_REMOVED~TODO if several extractors are found for the most specific type, e.g. key and value extractors for Map, raise an exception
SATD_REMOVED~TODO
SATD_REMOVED~TODO which one to use ???
SATD_REMOVED~collect all type parameters of the sub-type that map to the given type parameter of the super-type TODO should only be null until migrated off of value unwrappers
SATD_REMOVED~TODO be extra safe and make sure this is an array of Payload
SATD_REMOVED~TODO: need to find a way to check for unwrapping
SATD_REMOVED~TODO: should ScriptEvaluator be cached ?
SATD_REMOVED~TODO: need to change xml
SATD_REMOVED~TODO: implement
SATD_REMOVED~We only enable this optimization if the security manager is not enabled. Otherwise, we would have to add every package containing constraints to the security policy.
CLASS_OR_METHOD_CHANGED~We only enable this optimization if the security manager is not enabled. Otherwise, we would have to add every package containing constraints to the security policy.
SATD_REMOVED~TODO: For BVAL-214 we'd get the value from a map or another alternative structure instead
SATD_REMOVED~@todo if we have SNAPSHOT version should we do something special?
SATD_REMOVED~dependecy.setGroupid( groupId ) .... MavenArtifact artifact = artifactFactory.createArtifact( dependecy )  so maven artifact factory will be centralized service for creating repository paths  I am not sure if this is good option but it is something which might be considered
SATD_REMOVED~@todo what shall we do when jar was installed but we failed to install pom?
SATD_REMOVED~@todo do we need to crate md5 checksums in local repsitory? I think it would be nice if any local repository could be and at any moment in time used as remote repository so content of both repositories should be symetrical
SATD_REMOVED~@todo should we use plexus classes?
SATD_REMOVED~@todo we can use as well file wagon here.
SATD_REMOVED~@todo this will be duplicated in case of every mojo which implements deploy goal this should be pushed into the ArtifactDeployer component
SATD_REMOVED~TODO: validation instead
SATD_REMOVED~TODO: doesnt appear to be called
SATD_REMOVED~TODO: simple failure response
SATD_CHANGED~TODO: include dependencies marked for distribution under certain formats TODO: how, might we plugin this into an installer, such as NSIS? TODO: allow file mode specifications?
SATD_REMOVED~TODO: this needs a cleanup in plexus archiver - use a real typesafe enum
SATD_REMOVED~TODO: this should accept gz and bz2 as well so we can skip over the switch
SATD_REMOVED~TODO: better handling
SATD_REMOVED~TODO: use MavenArchiver for manifest?
SATD_CHANGED~TODO: shouldnt archiver do this?
SATD_REMOVED~TODO: shouldnt archiver do this?
SATD_REMOVED~TODO: shouldnt archiver do this?
SATD_REMOVED~TODO: shouldnt archiver do this?
SATD_REMOVED~TODO: shouldnt archiver do this?
SATD_REMOVED~TODO: shouldnt archiver do this?
SATD_CHANGED~TODO: shouldnt archiver do this?
SATD_REMOVED~TODO: default excludes?
SATD_REMOVED~TODO: Use multiple locale with a loop
SATD_REMOVED~TODO: In this case, should we rather just replace the existing plugin mapping??
SATD_REMOVED~TODO: I removed outputDirectory, and shouldnt have. Put it back here.
SATD_REMOVED~TODO: use source roots
SATD_REMOVED~TODO: explicit output directory when it is back
SATD_REMOVED~TODO: not the best solution. Perhaps a mojo tag that causes the plugin manager to populate project reports instead?
SATD_REMOVED~TODO: include dependencies marked for distribution under certain formats TODO: how, might we plug this into an installer, such as NSIS? TODO: allow file mode specifications?
CLASS_OR_METHOD_CHANGED~TODO: include dependencies marked for distribution under certain formats TODO: how, might we plug this into an installer, such as NSIS? TODO: allow file mode specifications?
SATD_REMOVED~TODO: use component roles? Can we do that in a mojo?
CLASS_OR_METHOD_CHANGED~TODO: use component roles? Can we do that in a mojo?
SATD_REMOVED~TODO: cat to file is temporary until the ssh executor is fixed to deal with output
CLASS_OR_METHOD_CHANGED~$NON-NLS-1$ $NON-NLS-1$ @todo this is the default, find real ejb version from dependencies
SATD_REMOVED~@todo direct optional artifacts are not included in the list returned by project.getTestArtifacts() .classpath should include ANY direct dependency, and optional dependencies are required to compile
SATD_MOVED_FILE~TODO: how can we let the WAR/EJBs plugin hook in and provide this? TODO: merge in ejb-module, etc.
SATD_MOVED_FILE~TODO: this is bad - reproducing war plugin defaults, etc! --> this is where the OGNL out of a plugin would be helpful as we could run package first and grab stuff from the mojo
SATD_MOVED_FILE~TODO: should derive from web.xml - does IDEA do this if omitted?
SATD_REMOVED~TODO: to FileUtils
SATD_REMOVED~TODO: some xpath may actually be more appropriate here
SATD_REMOVED~TODO: Replace this by FileUtils.getDefaultExcludes() when maven will use plexus-utils-1.2
SATD_REMOVED~Sort projectInfos and projectReports with the default locale setted TODO Beautify the output by sorting with each current locale
SATD_REMOVED~TODO: avoid this hardcoding - the resources dir might be elsewhere. We should really test for duplicate targets, not guess at what source files will be html. add the site resources directory to the default exclude list
SATD_REMOVED~TODO: Be good to generate a module's summary page thats referenced off the Modules menu item.
SATD_REMOVED~TODO: can we replace these with an XML tag?
SATD_REMOVED~Not running reactor - search for the projects manually
SATD_REMOVED~TODO: we should use a workspace API that would know if it was in the repository already or not
SATD_REMOVED~TODO: this is a bit crude - proper type, or proper handling as metadata rather than an artifact in 2.1?
SATD_REMOVED~TODO How to handle i18n?
SATD_REMOVED~TODO: plexus-archiver, if it could do the excludes
SATD_REMOVED~TODO: should derive from web.xml - does IDEA do this if omitted?
SATD_REMOVED~TODO should this break the build?
SATD_CHANGED~TODO: Ulgy hack below. Changing the directory should be enough for changing the values of all other properties depending on it!
SATD_REMOVED~Note: Ideally we should add the new compile source root at the same place as the one we'e removing but Theres no API for this...
SATD_REMOVED~TODO: assertions
SATD_REMOVED~TODO: separate release POM generation?
CLASS_OR_METHOD_CHANGED~TODO: rewrite parent TODO: rewrite SCM TODO: rewrite dependencies TODO: rewrite dependency management TODO: rewrite extensions TODO: rewrite plugins, plugin management TODO: rewrite reporting plugins
CLASS_OR_METHOD_CHANGED~TODO: what about if version is inherited? shouldnt prompt...
SATD_CHANGED~TODO: rewrite SCM TODO: rewrite dependency management TODO: rewrite extensions TODO: rewrite plugins, plugin management TODO: rewrite reporting plugins
SATD_REMOVED~We are only looking at dependencies external to the project - ignore anything found in the reactor as its version will be updated TODO: will it? what if it is a different snapshot version to the one being updated in the reactor?
SATD_REMOVED~TODO: we need to get a reference to the maven component and use that so this will work purely in an embedded mode. Not sure how to pass the release setting to the plugin in that instance though - still via -D, or is there a better way?
SATD_REMOVED~accept both space and comma, so the old way still work
SATD_REMOVED~TODO [!]: double check if these are the expected behaviours
SATD_CHANGED~TODO [!]: prep goals not configurable TODO [!]: resume not configured TODO: move to abstract?
SATD_REMOVED~TODO [!]: SCM URL is coming from the store but it probably needs to be read from every project instead TODO [!]: prepare release mojo needs to set this correct to either connection or developerConnection as appropriate - new version doesnt handle it
CLASS_OR_METHOD_CHANGED~accept both space and comma, so the old way still work
SATD_CHANGED~To change body of implemented methods use File,Settings,File Templates. TODO [!]
SATD_CHANGED~To change body of implemented methods use File,Settings,File Templates. TODO [!]
SATD_REMOVED~If our dependency specifies an explicit released version, do NOT update it to the latest released version.  If we depend on a SNAPSHOT that is being released, we update the version to reflect the newly released version. TODO Cleaner way to determine snapshot?
SATD_CHANGED~---------------------------------------------------------------------- We only care about dependencies that we are not processing as part of the release. Projects in the reactor will be dealt with so we dont need to worry about them here. We are strictly looking at dependencies that are external to this project. ----------------------------------------------------------------------
SATD_REMOVED~Really each of the scm providers should support something which returns the supported characters & lengths supported in tag names.  For now, we'll just assume that CVS is the only one with the problem with periods.
SATD_REMOVED~temporary hack to add namespace declaration, not supported by modello/MavenXpp3Writer MavenXpp3Writer doesnt support writing the xsd declaration, do it manually
SATD_REMOVED~TODO [!] check that callers split parameters that could formerly be comma-separated
SATD_REMOVED~TODO: do these still stream?
SATD_REMOVED~/* hack to avoid problems with sources encoding, this string contains accentuated aeiou in UTF-8 */
SATD_REMOVED~} TODO [!]
CLASS_OR_METHOD_CHANGED~Later, it would be a good idea to introduce a proper workflow tool so that the release can be made up of a more flexible set of steps.
CLASS_OR_METHOD_CHANGED~TODO: rollback?
SATD_REMOVED~TODO [!]: prep goals not configurable TODO [!]: resume not configured
SATD_REMOVED~TODO [!]: fix logging
SATD_REMOVED~TODO [!]: fix logging
SATD_REMOVED~TODO: includes and excludes
CLASS_OR_METHOD_CHANGED~TODO: includes and excludes
SATD_REMOVED~TODO: this is not mediating dependencies versions - first wins. Is there a way we can do that properly from here?
SATD_REMOVED~TODO: Is there a better way to get the artifact if it is not yet installed in the repo? reactorProject.getArtifact().getFile() is returning null tried also the project.getArtifact().getFile() but returning same result
SATD_REMOVED~TODO: svn utils should take care of prepending this
CLASS_OR_METHOD_CHANGED~TODO: svn utils should take care of prepending this
SATD_REMOVED~TODO: svn utils should take care of prepending this
CLASS_OR_METHOD_CHANGED~TODO: svn utils should take care of prepending this
SATD_CHANGED~@todo temporary disabled, since it randomically fails due to a different order for dependencies in classpath and wtpmodules. This is not a problem, since order could be ignored in this test, but we should rewrite the file-comparing step which at the moment just does line by line comparison public void testProject7() throws Exception
SATD_REMOVED~@todo temporary disabled, since it randomically fails due to a different order for dependencies in classpath and wtpmodules. This is not a problem, since order could be ignored in this test, but we should rewrite the file-comparing step which at the moment just does line by line comparison public void testProject7() throws Exception
CLASS_OR_METHOD_CHANGED~TODO: use compiler setting TODO: use compiler setting TODO: use compiler setting
SATD_REMOVED~TODO: property?
SATD_REMOVED~TODO: property?
SATD_REMOVED~TODO: verify there is a test for this method. TODO: create test for striping versions too
SATD_REMOVED~TODO: I'd really prefer to rewrite MavenArchiver as either a separate manifest creation utility (and to create an include pom.properties etc into another archiver), or an implementation of an archiver (the first is preferable).
SATD_REMOVED~TODO: what about wildcards? Just specifying groups? versions?
CLASS_OR_METHOD_CHANGED~TODO: what about wildcards? Just specifying groups? versions?
SATD_REMOVED~TODO: Version ranges, wildcards, ...?
CLASS_OR_METHOD_CHANGED~FIXME: Once Maven (all supported versions in the wild) are using plexus-utils >= 1.3, we should remove this.
SATD_REMOVED~TODO: not sure about location of dictionary - its usually just 1 argument.
SATD_REMOVED~TODO: get proper siteDirectory from site configuration of the project this relates to
SATD_REMOVED~TODO: add mojo param addVersionToProjectName  and if set append -version to the project name.
CLASS_OR_METHOD_CHANGED~TODO: add mojo param addVersionToProjectName and if set append -version to the project name.
SATD_REMOVED~XXX TODO: change the buildCommands param to match <buildCommands> <buildCommand> <name>....</name> <arguments> <somekey>somevalue</somekey> </arguments>
SATD_REMOVED~TODO: refactor this to use the filters.
SATD_REMOVED~TODO:refactor this
SATD_REMOVED~@todo this is the default, find real ejb version from dependencies
SATD_CHANGED~@todo temporary disabled, since it randomically fails due to a different order for dependencies in classpath and wtpmodules. This is not a problem, since order could be ignored in this test, but we should rewrite the file-comparing step which at the moment just does line by line comparison public void testProject07() throws Exception
SATD_REMOVED~@todo temporary disabled, since it randomically fails due to a different order for dependencies in classpath and wtpmodules. This is not a problem, since order could be ignored in this test, but we should rewrite the file-comparing step which at the moment just does line by line comparison public void testProject07() throws Exception
SATD_REMOVED~@TODO needs to be handled nicely in the verifier
SATD_REMOVED~TODO: fix DependencyTreeBuilder to apply filter
SATD_REMOVED~TODO: remove the need for this when the serializer can calculate last nodes from visitor calls only
SATD_CHANGED~@todo a final report with the list of missingArtifacts?
SATD_REMOVED~@todo also report deps without a source attachment but with a javadoc one?
SATD_REMOVED~@todo we should probably not make source/javadocs exclusive
SATD_REMOVED~TODO: There MUST BE a better way that this, but I kept running into incompatible ClassRealm class definitions...so, I give up.
CLASS_OR_METHOD_CHANGED~NOTE: All the code following this point was scooped from the DefaultLifecycleExecutor. There must be a better way but for now it should work.
CLASS_OR_METHOD_CHANGED~TODO: if moved to the plugin manager we already have the descriptor from above and so do can lookup the container directly
CLASS_OR_METHOD_CHANGED~do we want to look in the reactor like the project builder? Would require @aggregator goal which causes problems in maven core right now because we also need dependency resolution in other rules. (MNG-2277)
SATD_CHANGED~FIXME: This is BAD! Accessors SHOULD NOT change the behavior of the object.
SATD_REMOVED~TODO: We should be blacklisting these, but currently they're not supported by filename mapping interpolation.
SATD_REMOVED~TODO BUG for some reason it gets the wagon without authentication info
SATD_REMOVED~@todo Work around the bug above
SATD_REMOVED~TODO: could be better aligned with JXR, including getFiles() vs hasSources that finds java files.
SATD_REMOVED~TODO remove the part with ToolchainManager lookup once we depend on 3.0.9 (have it as prerequisite). Define as regular component field then.
SATD_REMOVED~TODO: IOException from plexus-utils should be acceptable here
CLASS_OR_METHOD_CHANGED~TODO: IOException from plexus-utils should be acceptable here
SATD_REMOVED~Hacks for assertEquals problems.
SATD_REMOVED~NOTE: This is a hack to compensate for files that contain generated values like dependent-object in org.eclipse.wst.common.component.  Regex would be a better solution.
SATD_REMOVED~TODO: if this really is an error, shouldnt we stop the build??
SATD_REMOVED~TODO: if this really is an error, shouldnt we stop the build??
SATD_REMOVED~TODO review generic for changes in QDOX 1.9.1
SATD_REMOVED~workaround for generics i.e. type.getValue() = E instead of real class
SATD_REMOVED~Workaround to take care of generics
SATD_REMOVED~TODO: IOException from plexus-utils should be acceptable here
SATD_REMOVED~TODO refactor - place the manipulation of the expressionEvaluator into a separated class.
SATD_REMOVED~TODO: such a call in MavenMetadataSource too - packaging not really the intention of type
SATD_REMOVED~TODO: such a call in MavenMetadataSource too - packaging not really the intention of type
SATD_REMOVED~TODO: Remove this, once we can depend on Maven 2.0.7 or later...in which MavenProject.getManagedVersionMap() exists. This is from MNG-1577.
SATD_REMOVED~NOTE: hard-coding to resolve artifacts transitively, since this is meant to be a self-contained repository...
CLASS_OR_METHOD_CHANGED~TODO use ReaderFactory.newXmlReader() when plexus-utils is upgraded to 1.4.5+
CLASS_OR_METHOD_CHANGED~TODO use ReaderFactory.newXmlReader() when plexus-utils is upgraded to 1.4.5+
CLASS_OR_METHOD_CHANGED~TODO use ReaderFactory.newXmlReader() when plexus-utils is upgraded to 1.4.5+
CLASS_OR_METHOD_CHANGED~FIXME: This will produce unpredictable results when module dependencies have a version conflict.
SATD_REMOVED~TODO: how to map to usefulinc site, or if this is necessary, the OSI page might be more appropriate.
SATD_REMOVED~could be a sporadic failure, one more retry before we give up
SATD_REMOVED~NOTE: Although the dependency reduced POM in the project directory is temporary build output, we have to use that for the file of the project instead of something in target to avoid messing up the base directory of the project. We'll delete this file on exit to make sure it gets cleaned up but keep a copy for inspection in the target directory as well.
SATD_REMOVED~TODO somehow shaky dependency between compilerId and tool executable.
SATD_REMOVED~TODO: dont catch Exception
SATD_REMOVED~TODO remove the part with ToolchainManager lookup once we depend on 3.0.9 (have it as prerequisite). Define as regular component field then.
SATD_REMOVED~TODO overall summary
SATD_REMOVED~TODO files summary
SATD_REMOVED~The Metrics report useless with the current PMD metrics impl. For instance, run the coupling ruleset and you will get a boatload of excessive imports metrics, none of which is really any use. TODO Determine if we are going to just ignore metrics.
SATD_REMOVED~The Metrics report useless with the current PMD metrics impl. For instance, run the coupling ruleset and you will get a boatload of excessive imports metrics, none of which is really any use. TODO Determine if we are going to just ignore metrics.
SATD_REMOVED~MCHECKSTYLE-131 ( olamy ) I dont like this hack. (dkulp) Me either.   It really pollutes the location stuff by allowing searches of stuff outside the current module.
CLASS_OR_METHOD_CHANGED~MCHECKSTYLE-131 ( olamy ) I dont like this hack. (dkulp) Me either.   It really pollutes the location stuff by allowing searches of stuff outside the current module.
SATD_REMOVED~TODO: this needs a cleanup in plexus archiver - use a real typesafe enum
CLASS_OR_METHOD_CHANGED~TODO: this should accept gz and bz2 as well so we can skip over the switch
CLASS_OR_METHOD_CHANGED~TODO: better handling
SATD_REMOVED~TODO: Re-implement these tests on the createArchiver(..) method. For now, they're no big loss. public void testConfigureArchiverFinalizers_ShouldDoNothingWhenNotSupportedByArchiver()
CLASS_OR_METHOD_CHANGED~TODO: such a call in MavenMetadataSource too - packaging not really the intention of type
SATD_REMOVED~MASSEMBLY-619 is now delegated to different overload. This probably means there is a parallel bleed between dependencies for module sets.
SATD_REMOVED~TODO: This is BAD! Accessors SHOULD NOT change the behavior of the object.
CLASS_OR_METHOD_CHANGED~TODO: This is BAD! Accessors SHOULD NOT change the behavior of the object.
SATD_REMOVED~Nicked from archiver until I can get a better solution. I am the author :)
SATD_REMOVED~TODO use WriterFactory.newXmlWriter() when plexus-utils is upgraded to 1.4.5+
SATD_REMOVED~TODO use ReaderFactory.newXmlReader() when plexus-utils is upgraded to 1.4.5+
SATD_REMOVED~TODO Add a noconvergence property string aligned with the other reports should generate the convergency report, even its single Maven project.
SATD_REMOVED~TODO Add a nomodules property string aligned with the other reports
SATD_REMOVED~TODO Add a nopluginmanagement property string aligned with the other reports
SATD_REMOVED~TODO: Will this adequately detect cycles between prefixed property references and prefixed project references??
SATD_CHANGED~TODO use WriterFactory.newXmlWriter() when plexus-utils is upgraded to 1.4.5+ $NON-NLS-1$
SATD_REMOVED~TODO use WriterFactory.newXmlWriter() when plexus-utils is upgraded to 1.4.5+ $NON-NLS-1$
SATD_REMOVED~fixed fixed $NON-NLS-1$ installed installed
SATD_CHANGED~fixed fixed $NON-NLS-1$ installed installed
SATD_REMOVED~fixed fixed $NON-NLS-1$ installed installed
SATD_REMOVED~TODO: shouldnt need classifer TODO: For 3.0 this should be changed having a separate classifier for main artifact and ejb-client.
CLASS_OR_METHOD_CHANGED~TODO: shouldnt need classifer TODO: For 3.0 this should be changed having a separate classifier for main artifact and ejb-client.
SATD_REMOVED~Handle the classifier if necessary TODO: For 3.0 this should be changed having a separate classifier for main artifact and ejb-client.
SATD_REMOVED~TODO: shouldnt need classifer TODO: For 3.0 this should be changed having a separate classifier for main artifact and ejb-client.
SATD_REMOVED~TODO: will null work instead?
SATD_REMOVED~TODO: This should be handled different.
SATD_REMOVED~FIXME I'm not getting runtime dependencies here
SATD_REMOVED~TODO: Remove this, once we can depend on Maven 2.0.7 or later...in which MavenProject.getManagedVersionMap() exists. This is from MNG-1577.
SATD_REMOVED~TODO: push into transformation
SATD_REMOVED~Here, we have a temporary solution to MINSTALL-3 (isDirectory() is true if it went through compile but not package). We are designing in a proper solution for Maven 2.1
SATD_REMOVED~TODO: maybe not strictly correct, while we should enforce that packaging has a type handler of the same id, we dont
SATD_CHANGED~TODO: Think if ResultionScope is needed here? May be we need to reconsider package phase? May be it would be wise to put into PREPARE-PACKAGE and the generation of the final jimage in the package phase? Furthermore It could make sense so we can change the conf files if needed...
SATD_REMOVED~TODO: Think if ResultionScope is needed here? May be we need to reconsider package phase? May be it would be wise to put into PREPARE-PACKAGE and the generation of the final jimage in the package phase? Furthermore It could make sense so we can change the conf files if needed...
SATD_REMOVED~FIXME: Check this ?
SATD_REMOVED~Always null see MPLUGIN-137 TODO remove when maven-plugin-tools-api:2.4.4
SATD_REMOVED~TODO remove when maven-plugin-tools-api:2.4.4 is out see PluginUtils.sortMojoParameters()
SATD_REMOVED~This feels more like a hack to filter out inactive profiles, there is no'direct' way to query activation status on a Profile instance.
FILE_PATH_CHANGED~TODO: would be good to scan the files here
SATD_REMOVED~Maven 2.x workaround
FILE_PATH_CHANGED~@todo if we can filter on hints, it should be done here...
FILE_PATH_CHANGED~TODO: failure if not a report
SATD_REMOVED~Maven 2.x workaround
FILE_PATH_CHANGED~@todo if we can filter on hints, it should be done here...
SATD_REMOVED~checkstyle will always use the context classloader in order to load resources (dtds), so we have to fix it olamy this hack is not anymore needed in maven 3.x
FILE_PATH_CHANGED~TODO: should be a failure, not an error. Report is not meant to throw an exception here (so site would work regardless of config), but should record this information
FILE_PATH_CHANGED~MCHECKSTYLE-332 Checkstyle 6.16+ (#569): the cache is moved to the Checker module instead of TreeWalker
FILE_PATH_CHANGED~MCHECKSTYLE-131 ( olamy ) I dont like this hack. (dkulp) Me either.   It really pollutes the location stuff by allowing searches of stuff outside the current module.
FILE_PATH_CHANGED~TODO: would be good to scan the files here
FILE_PATH_CHANGED~Let JIRA do the filtering of the current version instead of the JIRA mojo. This way JIRA returns less issues and we do not run into the  bEntriesMax limit that easily.
FILE_PATH_CHANGED~@todo Add more issue management systems here Remember to also add documentation in usage.apt.vm
FILE_PATH_CHANGED~TODO: better way?
FILE_PATH_CHANGED~If we dont get a properly formed templateName then Theres not much we can do. So we'll forget about trying to search any more paths for the template.
FILE_PATH_CHANGED~The standard issue types for Trac (probably wrong)
FILE_PATH_CHANGED~TODO: save for inspection?
SATD_REMOVED~This classloader juggling is a workaround for a classic Maven 2 class loader management bug.
FILE_PATH_CHANGED~TODO: is this guaranteed to be the latest?
FILE_PATH_CHANGED~TODO: localize?
FILE_PATH_CHANGED~@todo Do we need to be able to configure the locale of the JIRA server as well?
FILE_PATH_CHANGED~@todo We need to add something like issue.getPresentationIdentifier() to be able to support other IMSes beside JIRA
SATD_REMOVED~Handle deprecated parameters, in a backward compatible way
FILE_PATH_CHANGED~@todo Add more issue management systems here.
FILE_PATH_CHANGED~TODO: push to a helper? Could still be improved by taking more of the site information from the site plugin
SATD_REMOVED~The fileName should probably use the plugin executionId instead of the targetName
CLASS_OR_METHOD_CHANGED~The fileName should probably use the plugin executionId instead of the targetName
SATD_CHANGED~TODO: Think if ResultionScope is needed here? May be we need to reconsider package phase? May be it would be wise to put into PREPARE-PACKAGE and the generation of the final jimage in the package phase? Furthermore It could make sense so we can change the conf files if needed... CHECKSTYLE_OFF: LineLength
SATD_REMOVED~TODO: Think if ResultionScope is needed here? May be we need to reconsider package phase? May be it would be wise to put into PREPARE-PACKAGE and the generation of the final jimage in the package phase? Furthermore It could make sense so we can change the conf files if needed... CHECKSTYLE_OFF: LineLength
SATD_CHANGED~TODO: What about module name != artifactId which has been defined in module-info.java file! This would mean to read the module-info information from the jmod file for example...
SATD_CHANGED~TODO: Check if this is the correct way? This implies the artifactId is equal to moduleName.
SATD_CHANGED~TODO: Reconsider resolution scope, phase ? CHECKSTYLE_OFF: LineLength
SATD_REMOVED~TODO: Reconsider resolution scope, phase ? CHECKSTYLE_OFF: LineLength
SATD_CHANGED~We need to put the resulting x.jmod files into jmods folder. Check why?
SATD_REMOVED~Can not be overwritten... TODO: Good idea?
SATD_REMOVED~FIXME: Check this ?
SATD_REMOVED~TODO: Check if we should allow to extend the modulePaths by manual additions in the pom file?
SATD_CHANGED~TODO: What about module name != artifactId which has been defined in module-info.java file! This would mean to read the module-info information from the jmod/jar file for example to get the appropriate information.
SATD_REMOVED~TODO: Check if this is the correct way? This implies the artifactId is equal to moduleName which might not always be the case!
SATD_REMOVED~// FIXME: Need to check if the given paths exists? and if they are // folders? // String message = The given module-paths parameter  + modulePath.getAbsolutePath()
SATD_REMOVED~Isn't there a better solution?
SATD_REMOVED~FIXME: Make sure this can now be deleted
SATD_REMOVED~FIXME: Should probably blow up with localIdentifier is not right here!
SATD_REMOVED~FIXME: Can this somehow be integrated with the package stuff?
SATD_REMOVED~FIXME: Can this somehow be integrated with the package stuff?
SATD_REMOVED~Then merge fixed identifiers back in
SATD_REMOVED~DM: Changed behaviour here in order to suit MathAssess project better. We now only initialise an item once. The previous JQTI behaviour allowed items to be reinitialised, which had the effect of rebuilding template variables, which caused randomised questions in tests to re-randomise during navigation, which was deemed to be very confusing to students. I have left the existing logic intact below.  FIXME-DM: Maybe we should dump this flag completely and only initialise items when it actually makes sense?
SATD_REMOVED~TODO: Not really sure what's best here, but probably not important!
CLASS_OR_METHOD_CHANGED~FIXME: This way of accessing outcome values looks old... probably needs refactored!
SATD_REMOVED~FIXME: Kill this stuff here!
CLASS_OR_METHOD_CHANGED~TODO: Maybe allow some more control over this choice of prefix?
CLASS_OR_METHOD_CHANGED~FIXME: This way of accessing outcome values looks old... probably needs refactored!
FILE_PATH_CHANGED~Then merge fixed identifiers back in
SATD_REMOVED~DM: Changed behaviour here in order to suit MathAssess project better. We now only initialise an item once. The previous JQTI behaviour allowed items to be reinitialised, which had the effect of rebuilding template variables, which caused randomised questions in tests to re-randomise during navigation, which was deemed to be very confusing to students. I have left the existing logic intact below.  FIXME-DM: Maybe we should dump this flag completely and only initialise items when it actually makes sense?
FILE_PATH_CHANGED~TODO: Not really sure wha's best here, but probably not important!
SATD_REMOVED~FIXME: Make sure this can now be deleted /** Resets this expression and all its children state (set same state like before first evaluation). @param context TODO /
CLASS_OR_METHOD_CHANGED~FIXME: These operators are legal in test contexts too. We need to support this eventually.
SATD_MOVED_FILE~First do QTI 2.1 namespace TODO: If we add support for APIP, we'll need to change namespace here
CLASS_OR_METHOD_CHANGED~Consider node itself
SATD_REMOVED~TODO: Bring some of the SnuggleTeX XML Utility classes in to make this easier
SATD_REMOVED~TODO: Maybe allow some more control over this choice of prefix?
SATD_REMOVED~FIXME: Is the following original logic still wanted?
FILE_PATH_CHANGED~TODO: If we choose to support APIP or later versions of QTI, we'll need to change output namespace, so this will have to change.
SATD_REMOVED~(Slightly artificial implementation has to reflect non-directional nature of this value)
SATD_CHANGED~NB: Maybe this needs to account for selection/ordering?
SATD_REMOVED~NB: Maybe this needs to account for selection/ordering?
SATD_REMOVED~NB: Maybe this needs to account for selection/ordering?
SATD_REMOVED~NB: Maybe this needs to account for selection/ordering?
SATD_REMOVED~NB: Maybe this needs to account for selection/ordering?
SATD_REMOVED~NB: Maybe this needs to account for selection/ordering?
SATD_REMOVED~NB: Maybe this needs to account for selection/ordering?
SATD_REMOVED~NB: Maybe this needs to account for selection/ordering?
SATD_REMOVED~NB: Maybe this needs to account for selection/ordering?
SATD_REMOVED~NB: Maybe this needs to account for selection/ordering?
SATD_REMOVED~NB: Maybe this needs to account for selection/ordering?
SATD_REMOVED~NB: Maybe this needs to account for selection/ordering?
SATD_REMOVED~NB: Maybe this needs to account for selection/ordering?
SATD_REMOVED~NB: Maybe this needs to account for selection/ordering?
SATD_REMOVED~NB: Maybe this needs to account for selection/ordering?
SATD_REMOVED~NB: Maybe this needs to account for selection/ordering?
SATD_REMOVED~FIXME: This is too strict, but will require a lot more logic to relax
CLASS_OR_METHOD_CHANGED~FIXME: I've hard-coded maxAttempts=1 (for non-adaptive) items here. In future, this should be settable by the instructor.
SATD_REMOVED~Some responses could not be bound.  (This would happen if the client sends the wrong type of response data. This is NOT the fault of the candidate - it is either caused by the API caller or the rendering layer.)
SATD_REMOVED~FIXME: Following cant be null! Check what else uses this failure reason
SATD_REMOVED~FIXME: Need more rigorous state checking, e.g. no attempt after complete etc.
SATD_REMOVED~FIXME: I've hard-coded maxAttempts=1 (for non-adaptive) items here. In future, this should be settable by the instructor.
SATD_REMOVED~TODO: Need to redirect somewhere useful!
SATD_REMOVED~FIXME!
FILE_PATH_CHANGED~FIXME: Log this better
SATD_REMOVED~No userId specified, so we'll have to synthesise something that will be unique enough
SATD_REMOVED~TODO-LATER: Maybe allow some more control over this choice of prefix?
SATD_REMOVED~First do QTI 2.1 namespace. NB: We are ONLY writing out QTI 2.1 here. TODO: If we add support for APIP, we'll need to change namespace here
SATD_CHANGED~First do QTI 2.1 namespace. NB: We are ONLY writing out QTI 2.1 here. TODO: If we add support for APIP, we'll need to change namespace here
SATD_REMOVED~First do QTI 2.1 namespace. NB: We are ONLY writing out QTI 2.1 here. TODO: If we add support for APIP, we'll need to change namespace here
SATD_REMOVED~TODO-LATER: Maybe allow some more control over this choice of prefix?
SATD_REMOVED~FIXME: These operators are legal in test contexts too. We need to support this eventually.
SATD_REMOVED~FIXME: I've chosen not to say anything here, but it is possible for the resulting value to be illegal
SATD_REMOVED~FIXME: What to do if we get NULL result? Is an Exception the best thing?
SATD_REMOVED~FIXME: Cut & paste below! Refactor this!
SATD_REMOVED~Default dont get overridden in tests FIXME: Should we even be allowed to access test variables here?
SATD_REMOVED~/** Provides current time. This approach is because of testing. Timer for automated testing purposes can return discrete values instead of real time. You do not need to modify timer in real test. /
SATD_REMOVED~(These have all moved to AssessmentTestController) /** Returns current result of this test (only test itself, no items).  @param parent parent of created result @return current result of this test (only test itself, no items) / @ToRefactor public TestResult getTestResult(AssessmentResult parent)
SATD_REMOVED~if (!(parent instanceof AssessmentItemRef))
SATD_REMOVED~@Override @ToRefactor /* NB: Maybe this needs to account for selection/ordering? */
SATD_REMOVED~CUT & PASTE BELOW - YUCK!
CLASS_OR_METHOD_CHANGED~FIXME: Next wodge of code has some cut & paste!
SATD_REMOVED~FIXME: This is probably not the right logic in general but works OK in this restricted case
SATD_REMOVED~Mark test as finished.  FIXME: This would need generalised to handle multiple testParts
SATD_REMOVED~Sue prefers this Not in review state yet
CLASS_OR_METHOD_CHANGED~Sue prefers this Not in review state yet
SATD_REMOVED~Allow deselection FIXME: Review when we support linear?
SATD_CHANGED~FIXME: Only supporting NONLINEAR so far, so only outcome is to show navigation menu
SATD_REMOVED~FIXME: Only supporting NONLINEAR so far, so only outcome is to show navigation menu
SATD_REMOVED~FIXME: Only supporting NONLINEAR so far, so only outcome is to show navigation menu
SATD_REMOVED~Mark item as being presented FIXME: Is this the right place, or should it go in engine service layer?
SATD_REMOVED~Allow deselection FIXME: Review when we support linear?
SATD_REMOVED~Mark item as being presented FIXME: Is this the right place, or should it go in engine service layer?
SATD_REMOVED~Mark item as being presented FIXME: Is this the right place, or should it go in engine service layer?
SATD_REMOVED~FIXME: Currently EXIT_TEST_PART exits the test completely
SATD_REMOVED~FIXME: Handle the case of a degenerate test (i.e. no usable testParts, possibly because of failed preconditions).  FIXME: Handle the case where there is a testPart, but it doesnt contain any usable items, so gets ended immediately.
SATD_REMOVED~FIXME: Handle the case of a degenerate test (i.e. no usable testParts, possibly because of failed preconditions).  FIXME: Handle the case where there is a testPart, but it doesnt contain any usable items, so gets ended immediately.
SATD_REMOVED~FIXME: Handle the case of a degenerate test (i.e. no usable testParts, possibly because of failed preconditions).  FIXME: Handle the case where there is a testPart, but it doesnt contain any usable items, so gets ended immediately.
SATD_REMOVED~FIXME: Handle the case of a degenerate test (i.e. no usable testParts, possibly because of failed preconditions).  FIXME: Handle the case where there is a testPart, but it doesnt contain any usable items, so gets ended immediately.
SATD_REMOVED~FIXME! This logic is not right!
SATD_CHANGED~Not in review state yet
SATD_CHANGED~FIXME: Make sure we're allowed to review this item: allowReview OR showFeedback must be true
SATD_REMOVED~FIXME: Make sure we're allowed to review this item: allowReview OR showFeedback must be true
CLASS_OR_METHOD_CHANGED~FIXME: Need to check that the current test part is finished. We dont currently model this.
SATD_REMOVED~FIXME: Temporary override until we get decent authoring info!
SATD_REMOVED~We won't fail here, but this is probably a bad sign so let's log it!
SATD_REMOVED~FIXME: This is probably not the right logic in general but works OK in this restricted case
SATD_REMOVED~Extract state attributes FIXME: Remove legacy true FIXME: Remove legacy false FIXME: Remove legacy false
SATD_REMOVED~Extract state attributes FIXME: Remove legacy true FIXME: Remove legacy false FIXME: Remove legacy false
SATD_REMOVED~FIXME: Change this!
CLASS_OR_METHOD_CHANGED~If we're building HTML5, add in its custom pseudo-DOCTYPE as we cant generate this in XSLT. (NB: This only works sanely as we've hard-coded a reasonable encoding.)
CLASS_OR_METHOD_CHANGED~Extract item to review
CLASS_OR_METHOD_CHANGED~Extract item to review
SATD_REMOVED~If w're building HTML5, add in its custom pseudo-DOCTYPE as we cant generate this in XSLT. (NB: This only works sanely as we've hard-coded a reasonable encoding.)
CLASS_OR_METHOD_CHANGED~Now set candidate action permissions depending on state of session
CLASS_OR_METHOD_CHANGED~Extract item to review
SATD_REMOVED~FIXME: Probably have further checks to do here?
SATD_REMOVED~FIXME: Add checks to make sure we can do this
SATD_REMOVED~FIXME: Make sure the testPart is currently ended
SATD_REMOVED~FIXME: Need to check that the current test part is finished. We dont currently model this.
SATD_REMOVED~Maybe validate AssessmentPackage
SATD_REMOVED~Maybe validate new AssessmentPackage
FILE_PATH_CHANGED~Barf
SATD_REMOVED~FIXME: This way of accessing outcome values looks old... probably needs refactored!
SATD_REMOVED~TODO: Filter out the required assessmentItemRef instances and get the subclass to process them in some suitable way.
SATD_REMOVED~Create a delivery and a (hacky) token to pass back to access this delivery
SATD_REMOVED~TODO : maybe add a break here to prevent severals plugins to receive it
CLASS_OR_METHOD_CHANGED~FIXME : why we did that ?? this is not a good idea to force bounds when rescale = false
SATD_REMOVED~FIXME : mettre ca dans un stream Plugin Manager ?
SATD_REMOVED~// FIXME : a mettre dans un stream Plugin Manager @Override public void registerStreamPlugin(PluginStreamGenerator pluginStreamGenerator)
SATD_REMOVED~FIXME : why we need this ???
SATD_REMOVED~FIXME : why we need this ???
SATD_REMOVED~FIXME : why we need this ???
CLASS_OR_METHOD_CHANGED~TODO: add sequences from swimming pool ?
CLASS_OR_METHOD_CHANGED~TODO: add ROI from swimming pool ?
CLASS_OR_METHOD_CHANGED~TODO: add Painter from swimming pool ?
SATD_REMOVED~// TODO Auto-generated method stub  }
SATD_REMOVED~TODO : ajouter un support pour etre appelle en static ou encore pour que le plug genere son code macro ? TODO : ajouter le support de history ?
SATD_REMOVED~safety to dispatch on AWT for sequence afaik this is not safe at all as dead lock can occurs very quickly
SATD_REMOVED~HashSet is better suited for add without duplication
SATD_REMOVED~TODO: add sequences from swimming pool ?
CLASS_OR_METHOD_CHANGED~TODO: add ROI from swimming pool ?
CLASS_OR_METHOD_CHANGED~TODO: add Painter from swimming pool ?
SATD_MOVED_FILE~FIXME : why we did that ?? this is not a good idea to force bounds when rescale = false
SATD_REMOVED~FIXME : We use InvokeNow(...) to avoid the JVM deadlock bug (id: 5104239) when the AWT thread is initialized while others threads load some new library with ClassLoader.loadLibrary ThreadUtil.invokeNow(new Runnable()
SATD_REMOVED~FIXME : We use InvokeNow(...) to avoid the JVM deadlock bug (id: 5104239) when the AWT thread is initialized while others threads load some new library with ClassLoader.loadLibrary ThreadUtil.invokeNow(new Runnable()
SATD_REMOVED~// preload them here so further process won't wait them too much...
SATD_REMOVED~TODO: remove that when plugin will be updated
SATD_REMOVED~simple search in name and description
CLASS_OR_METHOD_CHANGED~can take sometime, better to execute it in background
SATD_REMOVED~if we have the local search provider, we try to transfer the result TODO: maybe we can do better than this hack...
SATD_REMOVED~not already present in local result --> add it TODO: serious hack here, try to improve that later :-/
SATD_REMOVED~FIXME : why this is needed ?
SATD_REMOVED~TODO
CLASS_OR_METHOD_CHANGED~TODO
SATD_REMOVED~TODO
SATD_REMOVED~TODO
CLASS_OR_METHOD_CHANGED~TODO
SATD_REMOVED~if ((roi1 instanceof ROI2DShape) && (roi2 instanceof ROI2DShape))
SATD_REMOVED~better to use ROI position ?
FILE_PATH_CHANGED~this ROI doesnt take care of inclusive parameter as intersect = contains
FILE_PATH_CHANGED~just take care about path
FILE_PATH_CHANGED~TODO
FILE_PATH_CHANGED~FIXME : need a better implementation
FILE_PATH_CHANGED~FIXME: hacky method to know visibility flags should not be impacted here